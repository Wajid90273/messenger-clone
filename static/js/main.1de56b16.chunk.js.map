{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","variant","component","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","width","height","alt","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","color","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4SA0BeA,G,MApBCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACpBC,EADiD,EAApBC,WACPF,EAAQE,SAEpC,OACI,qBAAKH,IAAKA,EAAKI,UAAS,mBAAcF,GAAU,kBAAhD,SACI,cAACG,EAAA,EAAD,CACID,UACIF,EAAS,qBAAuB,sBAFxC,SAKI,cAACI,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,WACMP,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MADL,IAC4DF,EAAQA,qB,QCDzES,EAJKC,IAASC,cAVN,CACrBC,OAAQ,0CACRC,WAAY,wCACZC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKMC,Y,iCC2ERC,MAhFf,WAAe,MAEeC,mBAAS,IAFxB,mBAEJC,EAFI,KAEGC,EAFH,OAGqBF,mBAAS,IAH9B,mBAGJG,EAHI,KAGMC,EAHN,OAIqBJ,mBAAS,IAJ9B,mBAIJnB,EAJI,KAIMwB,EAJN,KAyCX,OAnCAC,qBAAU,WAENlB,EAAGmB,WAAW,YACTC,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACTN,EACIM,EAASC,KAAKC,KAAI,SAACC,GAAD,MAAU,CACxBC,GAAID,EAAIC,GACRnC,QAASkC,EAAIE,iBAI9B,IAGHT,qBAAU,WACND,EAAYW,OAAO,6BAGpB,IAiBC,sBAAKlC,UAAU,MAAf,UACI,qBAAKmC,IAAI,qBAAqBC,MAAM,QAAQC,OAAO,QAAQC,IAAI,mBAC/D,0DACA,0CAAavC,KAGb,sBAAMC,UAAU,YAAhB,SACI,eAACuC,EAAA,EAAD,CAAavC,UAAU,mBAAvB,UAEI,cAACwC,EAAA,EAAD,CACIxC,UAAU,aACVyC,YAAY,qBACZC,MAAOvB,EACPwB,SAAU,SAACC,GAAD,OAAWxB,EAASwB,EAAMC,OAAOH,UAG/C,cAACI,EAAA,EAAD,CACI9C,UAAU,kBACV+C,UAAW5B,EACXf,QAAQ,YACR4C,MAAM,UACNC,KAAK,SACLC,QArCA,SAACN,GAEjBA,EAAMO,iBAEN7C,EAAGmB,WAAW,YAAY2B,IAAI,CAC1BrD,SAAUA,EACVF,QAASsB,EACTkC,UAAW9C,IAASS,UAAUsC,WAAWC,oBAI7CnC,EAAS,KAoBG,SAQI,cAAC,IAAD,WAKZ,cAAC,IAAD,UACKC,EAASS,KAAI,gBAAGE,EAAH,EAAGA,GAAInC,EAAP,EAAOA,QAAP,OACV,cAAC,EAAD,CAAkBE,SAAUA,EAAUF,QAASA,GAAjCmC,YCvEdwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5E,c","file":"static/js/main.1de56b16.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./Message.css\";\n\nconst Message = forwardRef(({ message, username }, ref) => {\n    const isUser = username === message.username;\n\n    return (\n        <div ref={ref} className={`messages ${isUser && \"messages__user\"}`}>\n            <Card\n                className={\n                    isUser ? \"messages__userCard\" : \"messages__guestCard\"\n                }\n            >\n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        {!isUser && `${message.username || 'Unknown User'}: `} {message.message}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n    );\n});\n\nexport default Message;\n","import firebase from \"firebase\";\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAwfKOUWcf1Ou_tK-4ZX9kBeibGwUbKvWY\",\n  authDomain: \"messenger-clone-55029.firebaseapp.com\",\n  projectId: \"messenger-clone-55029\",\n  storageBucket: \"messenger-clone-55029.appspot.com\",\n  messagingSenderId: \"538995193906\",\n  appId: \"1:538995193906:web:547c632af0f525a6ad242b\",\n  measurementId: \"G-F2B0Q98VLR\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, { useState, useEffect } from \"react\";\nimport { FormControl, Input } from \"@material-ui/core\";\nimport \"./App.css\";\nimport Message from \"./Message\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport FlipMove from \"react-flip-move\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { IconButton } from \"@material-ui/core\";\n\nfunction App() {\n    // useState = variable in REACT\n    const [input, setInput] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n    const [username, setUsername] = useState(\"\");\n\n    useEffect(() => {\n        // run once when the app component loads\n        db.collection(\"messages\")\n            .orderBy(\"timestamp\", \"desc\")\n            .onSnapshot((snapshot) => {\n                setMessages(\n                    snapshot.docs.map((doc) => ({\n                        id: doc.id,\n                        message: doc.data(),\n                    }))\n                );\n            });\n    }, []);\n\n    // useEffect = run code on a condition\n    useEffect(() => {\n        setUsername(prompt(\"Please enter your name\"));\n        // if its blank inside [], this code runs ONCE when the app components load\n        // if we have a variable like input, it will be firing at every change\n    }, []); // condition\n\n    const sendMessage = (event) => {\n        // all the logic to send the message\n        event.preventDefault(); // prevent form to refresh the page\n\n        db.collection(\"messages\").add({\n            username: username,\n            message: input,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        });\n        // append Message input to messages array\n        // setMessages([...messages, { username: username, message: input }]);\n        setInput(\"\");\n    };\n\n    return (\n        <div className=\"App\">\n            <img src=\"Messenger-logo.png\" width=\"100px\" height=\"100px\" alt=\"messenger_logo\"/>\n            <h1>Facebook-Messenger-clone</h1>\n            <h2>Welcome {username}</h2>\n\n            {/* form and button type submit allow the enter to send the message */}\n            <form className=\"app__form\">\n                <FormControl className=\"app__formControl\">\n                    {/* set the input value of the state */}\n                    <Input\n                        className=\"app__input\"\n                        placeholder=\"Enter a message...\"\n                        value={input}\n                        onChange={(event) => setInput(event.target.value)}\n                    />\n\n                    <IconButton\n                        className=\"app__iconButton\"\n                        disabled={!input}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        onClick={sendMessage}\n                    >\n                        <SendIcon />\n                    </IconButton>\n                </FormControl>\n            </form>\n\n            <FlipMove>\n                {messages.map(({ id, message }) => (\n                    <Message key={id} username={username} message={message} />\n                ))}\n            </FlipMove>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}